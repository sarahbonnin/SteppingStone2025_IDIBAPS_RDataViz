[["index.html", "R for beginners: Introduction to data visualization with R and ggplot2: from data to publication-quality figures Part1 Welcome", " R for beginners: Introduction to data visualization with R and ggplot2: from data to publication-quality figures Sarah Bonnin 2024-11-04 Part1 Welcome Dates, time &amp; location Dates: First edition: April 9 &amp; 11, 2024 Second edition: November 5 &amp; 7, 2024 Time: 9:30-13:00 Location: IDIBAPS Instructor Sarah Bonnin Senior bioinformatics consultant at Clarivate. Prerequisites The workshop is open to anyone with no (or little) prior programming experience. Attendees must however feel comfortable enough with their own computer to install programs (and debug their installation, when needed) and locate folders and files. Learning objectives Attendees will: Gain a high-level understanding of data import, manipulation and graphing with R and RStudio. Be able to produce and save a variety of publication-quality graphs (among others: boxplots, scatter plots, barplots). Learning outcomes Identify and use RStudio panels (console, scripts, folders and files panels). Locate useful resources to learn more and know where to seek help. Import data from files into R. Manipulate and prepare (filter, select) data. Produce graphs: Create a plot from “recipes”. Change basic parameters (color, font size, point shape, title, etc.). Export high-quality graphs in different formats (pdf, jpeg, png). What this workshop is NOT: A programming class. A design class. What this workshop is: An introduction to R and to RStudio software. An introduction to data visualization. A teaser to - hopefully - make you want to learn how to program in R! Tentative agenda Day 1 &amp; 2: 9:30-13:00. ~15-20’ break around 11:15-11:30. Welcome and set up Introduction to R and RStudio (Posit) Paths and directories R basics Data import ggplot2: Introduction, concept Scatter plots Barplots Boxplots Fine-tuning font Colors Faceting Data filtering and wrangling: select filter rename More ggplots Interactive plots with {plotly} More advanced data manipulation: the pipe operator from wide to long format Heatmaps with {pheatmap} Demo volcano plots "],["setup.html", "Part2 Setup ", " Part2 Setup "],["install-r-and-rstudioposit.html", "2.1 Install R and RStudio/Posit", " 2.1 Install R and RStudio/Posit Follow the instructions and relevant links on the Posit/RStudio website to install both R and RStudio Desktop: Installation instructions depend on the operating system installed on your computer. The next table provides a summary of links to follow, depending on the operating system: Opereating system R RStudio desktop Windows https://cran.rstudio.com/bin/windows/ Windows 10/11 macOS https://cran.rstudio.com/bin/macosx/ macOS 11+ Linux (Debian) https://cran.rstudio.com/bin/linux/debian Ubuntu 20 / Debian 11 Linux (Ubuntu) https://cran.rstudio.com/bin/linux/ubuntu Ubuntu 20 / Debian 11, Ubuntu 22 Linux (Fedora / Redhat) https://cran.rstudio.com/bin/linux/fedora Fedora 19 / Red Hat 7, Fedora 34 / Red Hat 8, Fedora 36 / Red Hat 9 If you are using a Linux OS, you will need to install additional packages: Debian, Ubuntu (DEB packages): libcurl4-openssl-dev libssl-dev libxml2-dev libfontconfig1-dev libharfbuzz-dev libfribidi-dev libfreetype6-dev libpng-dev libtiff5-dev libjpeg-dev Fedora, CentOS, RHEL (RPM packages): libxml2-devel libcurl-devel fontconfig-devel openssl-devel libjpeg-devel libtiff-devel libpng-devel Guides for Linux package installation (you may need to contact your IT department for permissions): Install a DEB package Install an RPM package "],["install-r-packages.html", "2.2 Install R packages", " 2.2 Install R packages Once R and RStudio are successfully installed, Open RStudio: In the bottom-right panel, click on tab “Packages” and then “Install” . In the “Packages” box, write “tidyverse” and click “Install”. It should look like the below image: The installation of this first package will take several minutes. Repeat the process for the following packages: ggrepel pheatmap plotly openxlsx VennDiagram Note: install packages one by one, as it eases debugging in case of installation failure. If installation of the first package (tidyverse) repeatedly fails, try and install the following packages independently: tidyr dplyr ggplot2 stringr "],["check-setup.html", "2.3 Check setup", " 2.3 Check setup In order to make sure that the setup is successful, click again on tab “Packages” of the bottom-right panel, and tick packages that you just installed, like the “tidyverse” package in that example: If no error (in red) appear in the console (bottom-left panel), installation should be ok. CHECK Copy-paste the following line of code in the console (bottom-left panel) and click on Enter / Return. You should be able to see the scatter plot appear on the “Plots” tab in the bottom-right panel ! diamonds %&gt;% dplyr::select(carat, price, clarity) %&gt;% ggplot(aes(x=carat, y=price, col=clarity)) + geom_point() "],["r.html", "Part3 R", " Part3 R "],["what-is-r.html", "3.1 What is R ?", " 3.1 What is R ? Programming language and environment for data manipulation, statistical computing, and graphical display. Implementation of the S programming language Created at the University of Auckland, New Zealand: Initial version released in 1995 Stable version released in 2000 Free and open source ! https://www.r-project.org/ Interactive, flexible Very active community of developers and users! Many resources and forums available "],["functions-packages.html", "3.2 Functions &amp; packages", " 3.2 Functions &amp; packages 3.2.1 Functions A function in R is a piece of code that takes an input (user data, parameters), processes some calculation, and outputs data. For example: the mean() function would take a vector / series of numbers as an input, calculate and output their average. Functions can take arguments/parameters. In the example above, the main argument to mean() would be a series of numbers given by the user. In R code, you can recognize functions because of the parenthesis (“round brackets”) following their name. 3.2.2 Packages 3.2.2.1 What are packages? A package in R stores, in standardized format, a set of functions, data and documentation. They are developed and shared by the community, and vary in size and complexity. Packages are stored in a library. source Packages are usually found in public repositories such as: CRAN (general repository for any type of data analysis). Bioconductor (initially specialized in high throughput data analysis / bioinformatics) Anyone can create a package and stored it locally; creating packages is a great way to share code. The previous function, mean(), is part of the {base} package that is available by default. 3.2.2.2 The “tidyverse” The tidyverse is an opinionated collection of R packages designed for data science. All packages share an underlying design philosophy, grammar, and data structures. source Why do we use the tidyverse packages in this course? Easier to understand / more intuitive vocabulary: better for beginners. More “modern” style of coding. Uniform in style and logic across data manipulation and visualization. In this course, we will use in particular, and in that order: {readr} for importing / exporting files. {ggplot2} for data visualization. {dplyr} for (simple) data manipulation and selection. "],["what-is-rstudio-posit.html", "Part4 What is RStudio (Posit)?", " Part4 What is RStudio (Posit)? Free and open source IDE (Integrated Development Environment) for R Available for Windows, Mac OS and LINUX "],["rstudio-interface.html", "4.1 RStudio interface", " 4.1 RStudio interface 4 panels: top-left: scripts and files bottom-left: R console Linux-line terminal / command-line top-right: environment, history, connections, tutorial bottom-right: tree of folders and files, plots/graphs window, packages, help window, viewer, presentation "],["the-r-console.html", "4.2 The R console", " 4.2 The R console The R console (bottom-left panel) is where the magic happens! It is where the user/programmer/you will interact with R. Let’s give it a try. Type (or copy-paste) the following in the console (bottom-left panel), and hit the Enter/Return key: getwd() getwd() is a function. Remember that functions are followed by parenthesis/round brackets. Upon clicking Enter/Return, you are asking the R kernel to execute the function. What R returns is the response/result after executing the function. The getwd() function retrieves and outputs your current working directory. Let’s try to interact a bit more with the console: copy-paste the following, and hit Enter/Return: 7*3 R gives you the results of this simple multiplication. USEFUL TIP In the console, press the up arrow key : this goes back to the previous commands/lines you wrote and sent in the console. "],["paths-and-directories.html", "Part5 Paths and directories ", " Part5 Paths and directories "],["path-and-home-directory.html", "5.1 Path and home directory", " 5.1 Path and home directory The path of a file/directory is its location/address in the file system. Your home directory is the one that hosts the user (your) data: it is similar, although not identical, in all operating systems, for example: /users/sbonnin or /home/sbonnin (Linux) /Users/sbonnin or /Home/sbonnin (macOS) C:\\Users\\sbonnin or C:\\Home\\sbonnin (Windows) The starting “/” or “\\” is called the root directory. Directories branch downwards from the root directory, and can contain both files and subdirectories. In the examples above, sbonnin is a subdirectory of users (or Users), and users starts at the root. Example of a tree / organization of directories: "],["create-the-workshop-directory.html", "5.2 Create the workshop directory", " 5.2 Create the workshop directory We will now create a folder/directory, where we will store what we produce during this course. Go to the Files tab in the bottom-right corner: by default, this will be set to your Home. You can navigate through the tree of files and directories by double clicking one folder name, to enter it, and by clicking on the double dot “..” to go back. Choose the folder under which you would like to save the workshop’s work. For example, you can create it right under Home -&gt; Documents (or anywhere else that you will remember, as we do not have the same folder structures). Click on “Home” and then on “Documents”: Create a folder called “DataViz_R_2024” by clicking on the “+Folder” icon. You should now see a new folder: Click on the newly created “DataViz_R_2024” folder, still under the “Files” tab, so you enter it. Click on the “More file commands button”: Click on “Set As Working Directory”: The working directory is where R will, by default, find files to read, and that is where it will also save files and figures, if another location/path is not specified. "],["r-basics.html", "Part6 R basics", " Part6 R basics In this section, we will cover very basic notions of R programming. "],["arithmetic-operators.html", "6.1 Arithmetic operators", " 6.1 Arithmetic operators R is a programming language with a statistics focus. While it can be used for very complex tasks, it can also be used as a simple calculator, as shown previously. The following arithmetic operators can be used for these tasks: Operator Function + addition - subtraction / division * multiplication ^ or ** exponential In the R terminal, as you have seen before, you can type the following: 10-2 And hit Enter for R to interpret the command, and give you the output. Then try the following: 3*5 or: (4*12)/5 "],["objects-in-r.html", "6.2 Objects in R", " 6.2 Objects in R So far, we used the R console interactively, and received the answers from R in the console. Data/output of commands can also be stored in objects. Everything that stores any kind of data in R is an object: When data is stored in objects, it can easily be reused. "],["assigning-data-to-an-object.html", "6.3 Assigning data to an object", " 6.3 Assigning data to an object We will use an assignment operator to assign (i.e. store) data to an object: You can use either &lt;- or = (essentially the same). Examples: Assigning/storing 10 to the object named B: Copy-paste the following in the console, and hit Enter. B &lt;- 10 This time, not there is no output. If you now type B in the R console, and hit Enter, what happens? Reassigning: modifying the content of an object: B &lt;- 12 You can also use an object to assign data to a new (or to the same) object: try the following in the console: B &lt;- 12 A &lt;- 5 A &lt;- A + B What values do A and B store now? You can see the objects you created in the upper-right panel in RStudio that is, the environment: How to name an object? Naming an object in R is quite flexible. You can use: letters (note that object names case sensitive: A and a are NOT the same) numbers (although the object name cannot start with a number) underscores _ What you CANNOT use: Spaces Most special characters "],["data-types.html", "6.4 Data types", " 6.4 Data types There are several data types in R: numeric (numbers) character (strings) logical / boolean (TRUE / FALSE) factor (categories) For this introduction, we will mainly see and use numeric (numbers) and character (strings) data types. A character or string of characters must be assigned with simple or double quotes (““), for example: myobject &lt;- &quot;training&quot; You should now see in the environment (upper-right corner) the new object called training. Now try to assign the same object without the quotes: myobject &lt;- training What happens? "],["import-data-read-files-scripts.html", "Part7 Import data / read files / scripts", " Part7 Import data / read files / scripts We will learn how to import the content of a file in R using the {readr} package (part of the {tidyverse} we previously installed). "],["fetch-workshop-files.html", "7.1 Fetch workshop files", " 7.1 Fetch workshop files First, let’s copy locally a few files that were prepared for this workshop. Go to: https://github.com/sarahbonnin/DataViz_source_files Download the ZIP archive, as follows: Click on -&gt; Download ZIP: Save the archive in the course folder (DataViz_R_2024) Extract the archive (click right on the archive and you should see some extraction options). What is extracted from the archive is the DataViz_source_files-main folder, which in turns contains a files folder: this contains the files we need for the course. The path to fetch the files is the following (remember that the first piece is OS/user dependent): /your_home_directory/DataViz_R_2024/DataViz_source_files-main/files e.g. /users/sbonnin/DataViz_R_2024/DataViz_source_files-main/files "],["import-read-in-data.html", "7.2 Import / read in data", " 7.2 Import / read in data 7.2.1 from CSV Let’s now import the content of a first file in our environment. There are several ways we can specify the path / location of a file: Using the “absolute path”: # absolute path geneexp &lt;- read_csv(&quot;/users/sbonnin/DataViz_R_2024/DataViz_source_files-main/files/expression_20genes.csv&quot;) Using the “relative path” (i.e. relative to where the session is currently located), e.g.: # relative path (this assumes you are in the course folder) geneexp &lt;- read_csv(&quot;DataViz_source_files-main/files/expression_20genes.csv&quot;) Because your working directory is /your_home_directory/DataViz_R_2024/, R can find the DataViz_source_files-main without requiring that you specify the whole path (relative vs absolute path). The content of file expression_20genes.csv is now stored in the object named geneexp. The function also outputs some information about the data you are importing: Such as that: The data contains 20 rows (observations), and 4 columns (variables). Out of these 4 columns: 2 contain characters (chr): Gene and DE. 2 contain numbers (dbl for “double”): sample1 and sample2 Notes: You can find the objects that you create in the Environment tab in the upper-right panel. If you click on an object name in the Environment tab, it will open on the upper-left panel. Let’s try with geneexp: "],["from-excel.html", "7.3 from Excel", " 7.3 from Excel {tidyverse} provides the {readxl} package with functions to read in Excel files. Although working with text files (.txt, .csv, .tsv etc.) is a better practice, you can import Excel files using the read_excel() function. First, load the {readxl} package (bottom-right panel -&gt; Packages -&gt; search and tick readxl, or from the console, as shown below). library(readxl) # Relative path: read_excel(&quot;DataViz_source_files-main/files/expression_20genes.xlsx&quot;) ## # A tibble: 20 × 4 ## Gene DE sample1 sample2 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 DKK1 No 9.06 5.27 ## 2 TP53 No 3.57 8.55 ## 3 BRCA1 No 7.39 8.24 ## 4 AKT3 Down 15.1 1.57 ## 5 CCND1 No 6.74 10.1 ## 6 AXL No 13.5 16.6 ## 7 STAT3 Down 15.2 5.46 ## 8 CCL1 No 5.28 7.09 ## 9 TRAF2 No 8.93 12.9 ## 10 IL1R No 8.46 15.3 ## 11 TAB2 No 9.76 14.6 ## 12 HPK1 Down 14.1 7.34 ## 13 TLR8 Up 2.69 16.3 ## 14 TGFB No 7.83 12.5 ## 15 STAT5 Down 18.6 9.21 ## 16 ADAM17 Down 16.1 10.3 ## 17 PTEN Up 0.0210 11.2 ## 18 SMRT No 11.7 16.9 ## 19 DVL No 4.33 6.84 ## 20 MAPK2 Up 0.998 9.56 If the Excel file contains multiple sheets, you can specify the name of the sheet using the sheet= parameter: read_excel(&quot;DataViz_source_files-main/files/expression_20genes.xlsx&quot;, sheet=&quot;tab1&quot;) ## # A tibble: 20 × 4 ## Gene DE sample1 sample2 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 DKK1 No 9.06 5.27 ## 2 TP53 No 3.57 8.55 ## 3 BRCA1 No 7.39 8.24 ## 4 AKT3 Down 15.1 1.57 ## 5 CCND1 No 6.74 10.1 ## 6 AXL No 13.5 16.6 ## 7 STAT3 Down 15.2 5.46 ## 8 CCL1 No 5.28 7.09 ## 9 TRAF2 No 8.93 12.9 ## 10 IL1R No 8.46 15.3 ## 11 TAB2 No 9.76 14.6 ## 12 HPK1 Down 14.1 7.34 ## 13 TLR8 Up 2.69 16.3 ## 14 TGFB No 7.83 12.5 ## 15 STAT5 Down 18.6 9.21 ## 16 ADAM17 Down 16.1 10.3 ## 17 PTEN Up 0.0210 11.2 ## 18 SMRT No 11.7 16.9 ## 19 DVL No 4.33 6.84 ## 20 MAPK2 Up 0.998 9.56 "],["scripts.html", "7.4 Scripts", " 7.4 Scripts A script is a text file containing a set of commands and comments. It can be saved, re-used later or be shared. It is good practice to create a script and save all commands: let’s create a script for this course. Go to File -&gt; New File -&gt; R script A new window will open in the upper-left panel. Now save the file in the course folder (you can name it workshop.R) Save all commands you will use during the course, and save changes regularly! TIP: you can send a line or selected lines from the script to the console without copy-pasting: press CTRL+ENTER when highlighting the row. "],["ggplot2.html", "Part8 ggplot2", " Part8 ggplot2 Graphing package inspired by the Grammar of Graphics work of Leland Wilkinson: The Grammar of Graphics is based on the idea that every graphic can be broken down into a series of components or layers. These components include the data, the aesthetic mapping, the geometric shapes, the statistical transformation, and the scales. source Flexible, versatile, customizable. Well documented. image from https://www.cedricscherer.com/img/ggplot-tutorial/overview.png "],["getting-started.html", "8.1 Getting started", " 8.1 Getting started A ggplot graph needs at least 3 components: Data: that is the source data that we want to represent. Aesthetics mappings: they describe what will be visualized from data. What are you trying to show? Geometrics: functions that represent what we see in the graph: lines, points, boxes etc. for example: geom_point() geom_lines() geom_histogram() geom_boxplot() geom_bar() geom_smooth() geom_tiles() The base structure is the following: ggplot(&lt;DATA&gt;, &lt;AESTHETICS&gt;) + &lt;GEOMETRICS&gt; For example if we want to represent column1 (on the x axis) and column2 (on the y axis) of data as points, we can use the following structure: ggplot(data=dataframe, mapping=aes(x=column1, y=column2)) + geom_point() This will be our template as we explore different types of graphs. We can add more layers and components to this base structure to customize the plot, as we will see in the next examples. "],["scatter-plot.html", "8.2 Scatter plot", " 8.2 Scatter plot 8.2.1 Base plot We can start from the geneexp object, that holds the content of file expression_20genes.csv: we want to plot sample1 on the x axis and sample2 on the y axis. The base layer will be the following: ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) Copy-paste this in the console, and hit Enter. As you can see, nothing is plotted yet: the base is set. Adding to the base layer the geometrics called geom_point(), we tell ggplot to produce a scatter/point plot: # This line is a comment: a comment is not interpreted by R. # Example of a scatter plot: add the geom_point() layer ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point() # Note that the new line is NOT necessary after the &quot;+&quot;: it is done for clarity / readability. Please, copy the code above in your script, and hit Enter! Your plot should appear in the “Plots” tab in the bottom-right panel. 8.2.2 Customize the points geom_point() can take parameters, including the point color and size: Color all points in red: ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point(color=&quot;red&quot;) Increase point size (default size is 1.5): ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point(color=&quot;red&quot;, size=2.5) This is a good place to introduce the help pages of functions. Functions in ggplot2 (and tidyverse in general) are richly documented. While documentation can be quite technical it is always good practice to take a look at it. You can access the help page of a function in the Help tab in the bottom-right panel. Give it a try with “geom_point”: Back to our customization: let’s set different shapes for the points! This is done by setting the shape parameter in geom_point(). Points can become, for example, triangles: ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point(color=&quot;red&quot;, size=2.5, shape=&quot;triangle&quot;) See more options in the following image: Image from ggplot2 documentation Note that you can also replace the points by any character, the following way: ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point(color=&quot;red&quot;, size=2.5, shape=&quot;$&quot;) 8.2.3 Add more layers We can add more layers to the plot, using the same structure (+ layer_name()) 8.2.3.1 ggtitle() Add a title using the ggtitle() layer: ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point(color=&quot;red&quot;, size=2.5, shape=&quot;diamond&quot;) + ggtitle(label=&quot;my first ggplot&quot;) label is a parameter of ggtitle() function. 8.2.3.2 Background Not a big fan of the grey background? This is the default “theme”, but there are more options. For example: ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point(color=&quot;red&quot;, size=2.5, shape=&quot;diamond&quot;) + ggtitle(label=&quot;theme grey (the default theme)&quot;) + theme_grey() ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point(color=&quot;red&quot;, size=2.5, shape=&quot;diamond&quot;) + ggtitle(label=&quot;theme linedraw&quot;) + theme_linedraw() ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point(color=&quot;red&quot;, size=2.5, shape=&quot;diamond&quot;) + ggtitle(label=&quot;theme bw = black and white&quot;) + theme_bw() ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point(color=&quot;red&quot;, size=2.5, shape=&quot;diamond&quot;) + ggtitle(label=&quot;theme void&quot;) + theme_void() Here is a good page to check the different backgrounds: https://ggplot2-book.org/themes#sec-theme Note that you can also change some settings globally as you use a new theme, e.g.  base_size: by default, 11. base_family: the font (uses by default arial or sans). To check the fonts that are available, type systemfonts::system_fonts()$family base_line_size: by default, base_size/22. base_rect_size: by default, base_size/22 # get full list of available fonts in your system with: ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point(color=&quot;red&quot;, size=2.5, shape=&quot;diamond&quot;) + ggtitle(label=&quot;my first ggplot&quot;) + theme_bw(base_size=18, base_family = &quot;Laksaman&quot;, base_line_size = 2, base_rect_size = 4) 8.2.3.3 Regression line Add a regression line with geom_smooth(). A smoothed line can help highlight the dominant pattern/trend. ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point(color=&quot;red&quot;, size=2.5, shape=&quot;diamond&quot;) + ggtitle(label=&quot;my first ggplot&quot;) + theme_linedraw() + geom_smooth() Remove the confidence interval: ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point(color=&quot;red&quot;, size=2.5, shape=&quot;diamond&quot;) + ggtitle(label=&quot;my first ggplot&quot;) + theme_linedraw() + geom_smooth(se=FALSE) Different methods can be used to fit the smoothing line: “lm”: linear model. “glm”: generalized linear model. “gam”: generalized additive model. “loess”: local polynomial regression. A function (more advanced) By default, the smoothing method is picked based on the size of the largest group across all panels. ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point(color=&quot;red&quot;, size=2.5, shape=&quot;diamond&quot;) + ggtitle(label=&quot;my first ggplot&quot;) + theme_linedraw() + geom_smooth(se=FALSE, method=&quot;lm&quot;) More advanced (as reference, or if someone asks): add correlation coefficient: You can add the correlation coefficient between the 2 variables, using another function from the {ggpubr} package: ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point(color=&quot;red&quot;, size=2.5, shape=&quot;diamond&quot;) + ggtitle(label=&quot;my first ggplot&quot;) + theme_linedraw() + geom_smooth() + ggpubr::stat_cor(method = &quot;pearson&quot;, label.x = 3, label.y = 30) "],["save-your-plot.html", "8.3 Save your plot", " 8.3 Save your plot 8.3.1 From the RStudio interface Before we dive into more graph types, let’s pause and learn how to easily save the current plot. In the “Plots” tab, click on “Export” and “Save as image”: From that windows, you can: Pick an image format between: PNG, JPEG, TIFF, BMP, SVG, EPS. Choose where you want to save the output file (by default, R will propose the current working directory). Choose the file name. Set the dimensions, by either: Setting the Width and Height of the figure (in pixels) Moving the graph manually (bottom-right corner of the plot) until you obtain the size and proportions that you want. 8.3.2 From the console The best way to save a plot to a few from the console, is using the ggsave function. First, you need to save the plot to an object (if you don’t, ggplot will create a file from the latest plot, which is fine too!). myplot &lt;- ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point(color=&quot;red&quot;, size=2.5, shape=&quot;diamond&quot;) + ggtitle(label=&quot;my first ggplot&quot;) Many different formats are available: eps ps tex pdf jpeg tiff png bmp svg wmf ggsave(filename=&quot;myplot.png&quot;, plot=myplot, device=&quot;png&quot;) You can specify the plot size units between inches “in”, centimeters “cm”, milimeters “mm” or pixels “px”. You can also specify the dpi, i.e. dots per inches. If we take as an example the requirements of electronic image formats for Nature publishing group: “Layered Photoshop (PSD) or TIFF format (high resolution, 300–600 dots per inch (dpi) )” We could save the plot as a file the following way: ggsave(filename=&quot;myplot.tiff&quot;, plot=myplot, device=&quot;tiff&quot;, dpi=300, units=&quot;in&quot;, width=5, height=5) "],["exercise-1.html", "8.4 Exercise 1", " 8.4 Exercise 1 Time for our first exercise! Starting from the same object geneexp: Create a scatter plot that shows sample2 on the x-axis and sample1 on the y-axis. correction ggplot(data=geneexp, mapping=aes(x=sample2, y=sample1)) + geom_point() 2. Change the point color to blue, and the point size to 2. correction ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point(color=&quot;blue&quot;, size=2) 3. Change the point shape to “square cross” correction ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point(color=&quot;blue&quot;, size=2, shape=&quot;square cross&quot;) 4. Add the title of your choice. correction ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point(color=&quot;blue&quot;, size=2, shape=&quot;square cross&quot;) + ggtitle(label=&quot;my second ggplot&quot;) 5. Add a subtitle (wait: that’s new! Check ggtitle help page and/or Google “ggtitle subtitle” and see if you can find!) correction ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point(color=&quot;blue&quot;, size=2, shape=&quot;square cross&quot;) + ggtitle(label=&quot;my second ggplot&quot;, subtitle=&quot;nice blue squares&quot;) 6. Save your plot as a JPEG file, in the workshop folder, with dimensions 600X600 pixels. correction From the interface: Bottom-right panel -&gt; Plots tab -&gt; Export -&gt; … From the console: # first, save in an object mybluescatterplot &lt;- ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point(color=&quot;blue&quot;, size=2, shape=&quot;square cross&quot;) + ggtitle(label=&quot;my second ggplot&quot;, subtitle=&quot;nice blue squares&quot;) # then save with ggsave ggsave(filename=&quot;myblueplot.jpg&quot;, plot=mybluescatterplot, device=&quot;jpeg&quot;, units=&quot;px&quot;, width=600, height=600) "],["scatter-plots-more-features.html", "8.5 Scatter plots: more features", " 8.5 Scatter plots: more features We can customize our scatter plot a bit more. 8.5.1 Labels We may want to show the gene names that the points represent. This is done by: setting the label parameter, in the ggplot aes() function adding the geom_text() layer ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2, label=Gene)) + geom_point() + geom_text() We can adjust the position of the labels relative to the points, so they do not overlap: this is done with nudge_x (moves the labels horizontally / on the x axis). ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2, label=Gene)) + geom_point() + geom_text(nudge_x=1.5) We can also decrease or increase the label size: ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2, label=Gene)) + geom_point() + geom_text(nudge_x=1.5, size=3) You can also overrule the mapping of colors to labels and keep all labels black, for example: ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2, label=Gene)) + geom_point() + geom_text(nudge_x=1.5, size=3, color=&quot;black&quot;) Note that the automatic organization of labels, so that they do not overlap, can be done using the {ggrepel} package. You only need to load the package and change geom_text() with geom_repel_text(): ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2, label=Gene)) + geom_point() + geom_text_repel() 8.5.2 Color and shape mapping Point color and shape can be dependent on another column / variable of the data. This is called mapping an aesthetic to a variable. Columns used to conditionally color or shape the points are set inside the aes() function. For shape: ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2, label=Gene, shape=DE)) + geom_point() + geom_text(nudge_x=1.2, size=3) For color: ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2, label=Gene, color=DE)) + geom_point() + geom_text(nudge_x=1.2, size=3) TIP: remove the double labeling in the legend (a letter behind the point because both labels and colors are mapped to the same variable): set show.legend=FALSE in geom_text(): ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2, label=Gene, color=DE)) + geom_point() + geom_text(nudge_x=1.2, size=3, show.legend=FALSE) You can change the legend title the following way: ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2, label=Gene, color=DE)) + geom_point() + geom_text(nudge_x=1.2, size=3, show.legend=FALSE) + scale_color_discrete(name=&quot;DiffExp&quot;) More advanced (as reference, or if someone asks): how to change default colors: Colors can be set manually using (yet another) layer: scale_color_manual(). ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2, label=Gene, color=DE)) + geom_point() + geom_text(nudge_x=1.2, size=3) + scale_color_manual(values=c(Down=&quot;blue&quot;, No=&quot;black&quot;, Up=&quot;red&quot;)) 8.5.3 Additional ticks geom_rug creates a compact visualization along the axes to help read the information of individual cases. You can simply add it as an additional layer. ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point(color=&quot;red&quot;, size=2.5, shape=&quot;diamond&quot;) + ggtitle(label=&quot;my first ggplot&quot;) + theme_linedraw() + geom_rug() As usual, you can customize several parameters, such as: sides: sides where to draw the lines (top, bottom, right, left) alpha: opacity Ranges from 0 (transparent) to 1 (opaque). linewidth, linetype ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point(color=&quot;red&quot;, size=2.5, shape=&quot;diamond&quot;) + ggtitle(label=&quot;my first ggplot&quot;) + theme_linedraw() + geom_rug(sides=&quot;tr&quot;, alpha=0.3, linewidth=1) 8.5.4 Density estimates geom_density_2d performs a 2D kernel density estimation and displays the results with contours. ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point(color=&quot;red&quot;, size=2.5, shape=&quot;diamond&quot;) + ggtitle(label=&quot;my first ggplot&quot;) + theme_linedraw() + geom_density_2d() Play with some of the parameters we already know: ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point(color=&quot;red&quot;, size=2.5, shape=&quot;diamond&quot;) + ggtitle(label=&quot;my first ggplot&quot;) + theme_linedraw() + geom_density_2d(color=&quot;pink&quot;, alpha=0.5, linewidth = 2) "],["barplots.html", "8.6 Barplots", " 8.6 Barplots A barplot (or barchart) is a graph that represents categorical data with rectangular bars, which heights are proportional to the values they represent. The first layer of the ggplot() function is similar. However, note that only x= is set in aes() function (the basic way to plot a barplot): ggplot(data=dataframe, mapping=aes(x=column1)) + geom_bar() Using our previous geneexp data, we can produce a bar plot out of the DE column, such as: ggplot(geneexp, aes(x=DE)) + geom_bar() This produces a barplots containing 3 bars: Down, No and Up: their height represents the number of genes found in each category. "],["exercise-2.html", "8.7 Exercise 2", " 8.7 Exercise 2 Import file DataViz_source_files-main/files/gencode.v44.annotation.csv in an object called gtf. correction gtf &lt;- read_csv(&quot;DataViz_source_files-main/files/gencode.v44.annotation.csv&quot;) This is a small subset of the gencode v44 human gene annotation, created the following way: Selection of protein coding genes, long non-coding genes, miRNAs, snRNAs and snoRNAs. Selection of chromosomes 1 to 10 only. Creation of a random subset of 1000 genes. Convertion to a friendly csv format. 2. Create a simple barplot representing the count of genes per chromosome: correction ggplot(data=gtf, mapping=aes(x=chr)) + geom_bar() 3. Keep the chromosome represented on the x axis, and split the barplot per gene type. TIP: remember how we set color= in mapping=aes() function in the scatter plot section? Give it a try here! correction ggplot(data=gtf, mapping=aes(x=chr, color=gene_type)) + geom_bar() 4. Change color= with fill= in aes(). What changes? correction ggplot(data=gtf, mapping=aes(x=chr, fill=gene_type)) + geom_bar() 5. Add a title to the graph: correction ggplot(data=gtf, mapping=aes(x=chr, fill=gene_type)) + geom_bar() + ggtitle(label = &quot;Number of genes per chromosome, split by gene type&quot;) 6. Change the default theme: correction ggplot(data=gtf, mapping=aes(x=chr, fill=gene_type)) + geom_bar() + ggtitle(label = &quot;Number of genes per chromosome, split by gene type&quot;) + theme_bw() 7. Save the graph in PNG format in the workshop’s directory. correction # save plot in an object gtfbars &lt;- ggplot(data=gtf, mapping=aes(x=chr, fill=gene_type)) + geom_bar() + ggtitle(label = &quot;Number of genes per chromosome, split by gene type&quot;) + theme_bw() # save as PNG file ggsave(filename=&quot;gtfbarplot.png&quot;, plot=gtfbars, device=&quot;png&quot;) "],["barplots-bars-position.html", "8.8 Barplots: bars position", " 8.8 Barplots: bars position We can also play with the position of the bars. By default, position is stack, i.e. categories are stacked on top of each other along the bar. Position fill scales data so the top is always 1, i.e. it shows proportions, instead of the absolute values: ggplot(data=gtf, mapping=aes(x=chr, fill=gene_type)) + geom_bar(position=&quot;fill&quot;) Position dodge represents each category (here, gene types) side-by-side: ggplot(data=gtf, mapping=aes(x=chr, fill=gene_type)) + geom_bar(position=&quot;dodge&quot;) More advanced (as reference, or if someone asks): how to reorder x-axis labels: Factors are a data type in R: they are used to represent categorical data. Using factors requires a bit more understanding of R works/thinks, but here is an application using ordered factors/categories: ggplot(data=gtf, mapping=aes(x=factor(chr, levels=c(&quot;chr1&quot;, &quot;chr2&quot;, &quot;chr3&quot;, &quot;chr4&quot;, &quot;chr5&quot;, &quot;chr6&quot;, &quot;chr7&quot;, &quot;chr8&quot;, &quot;chr9&quot;, &quot;chr10&quot;), ordered=TRUE), fill=gene_type)) + geom_bar(position=&quot;dodge&quot;) + xlab(&quot;chromosome&quot;) 8.8.1 stat=“identity” parameter stat represents a statistical transformation of the data. It typically aims to summarize the data. geom_bar() provides different options for stat: count (default): counts the number of occurrences of each value / category in x. It does not expect an input in y. identity: uses the data as is (i.e. no transformation is applied) and skips the aggregation. Values used for the bars (categories) are provided by the user in x. Height of the bars are provided in y. Let’s import data from file: DataViz_source_files-main/files/stats_continents_barcelona_2013-2023_long.csv in an object called statsbcn. The data contains the number of foreign residents in Barcelona from 2013 to 2023. statsbcn &lt;- read_csv(&quot;DataViz_source_files-main/files/stats_continents_barcelona_2013-2023_long.csv&quot;) How many rows and how many columns does the data contain? In the barplots we created so far, R takes categories in the columns specified in x= and counts the number of occurrences. If we now set stat=“identity” in geom_bar(), R uses the sum of the variable specified in y=, grouped by the x variable. In the following example, we are plotting the sum of foreign residents in Barcelona (Population provided in y) per year (Year provided in x): ggplot(statsbcn, aes(x=Year, y=Population)) + geom_bar(stat=&quot;identity&quot;) We can map, for example, fill to Continent: ggplot(statsbcn, aes(x=Year, y=Population, fill=Continent)) + geom_bar(stat=&quot;identity&quot;) We can further play with the position, as previously done. Position fill : ggplot(statsbcn, aes(x=Year, y=Population, fill=Continent)) + geom_bar(stat=&quot;identity&quot;, position=&quot;fill&quot;) Position dodge : ggplot(statsbcn, aes(x=Year, y=Population, fill=Continent)) + geom_bar(stat=&quot;identity&quot;, position=&quot;dodge&quot;) We can control the width of bars (hence, the spacing between 2 bars) using the width parameter of geom_bar(): ggplot(statsbcn, aes(x=Year, y=Population, fill=Continent)) + geom_bar(stat=&quot;identity&quot;, position=&quot;dodge&quot;, width = 0.8) More advanced (as reference, or if someone asks): display all labels: Convert “Year” column as character, instead of numbers: # convert the x-axis from a continuous to a discrete variable (as.character) ggplot(statsbcn, aes(x=as.character(Year), y=Population, fill=Continent)) + geom_bar(stat=&quot;identity&quot;, position=&quot;dodge&quot;) "],["boxplots.html", "8.9 Boxplots", " 8.9 Boxplots A boxplot is used to visualize the distribution of data. Source We will import data from a file that contains the same information as geneexp but in a slightly different format: geneexp2 &lt;- read_csv(&quot;DataViz_source_files-main/files/expression_20genes_long.csv&quot;) In our first boxplot, one box corresponds to one sample: ggplot(geneexp2, aes(x=sample, y=expression)) + geom_boxplot() We can split boxes by DE, the same way we did for barplots, by mapping fill or color to the variable: ggplot(geneexp2, aes(x=sample, y=expression, fill=DE)) + geom_boxplot() If you prefer a violin plot, it is easy: ggplot(geneexp2, aes(x=sample, y=expression, fill=DE)) + geom_violin() Violin plots also aim to visualize data distribution. While boxplots can only show summary statistics / quantiles, violin plots also show the density of each variable. "],["fine-tuning-text.html", "8.10 Fine-tuning text", " 8.10 Fine-tuning text Controlling the font size and style of the different components of the graph (axis text, title, legend, etc.) is important for the image readability and impact. Text size and style of ggplot2 graphs can be changed using the theme() function. While very powerful, it can take a bit of time to get used to the structure. We will illustrate how to make some changes using theme() layer on our first scatter plot. Change overall font size: ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point() + ggtitle(&quot;scatter plot&quot;) + theme(text = element_text(size = 20)) Change font size of axis text: ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point() + ggtitle(&quot;scatter plot&quot;) + theme(axis.text = element_text(size = 20)) Change font size of axis titles: ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point() + ggtitle(&quot;scatter plot&quot;) + theme(axis.title = element_text(size = 20)) Remove axis titles (e.g. below: removing x-axis title): ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point() + ggtitle(&quot;scatter plot&quot;) + theme(axis.title.x = element_blank()) Shift the graph title to the right (it is by default centered to the left): ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point() + ggtitle(&quot;scatter plot&quot;) + theme(plot.title = element_text(hjust = 0.5)) Change font size of the graph title: ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point() + ggtitle(&quot;scatter plot&quot;) + theme(plot.title = element_text(size = 20, hjust = 0.5)) Change the color of the title, and make it bold: ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point() + ggtitle(&quot;scatter plot&quot;) + theme(plot.title = element_text(size = 20, hjust = 0.5, face = &quot;bold&quot;, colour = &quot;blue&quot;)) You can also use theme() to rotate the x-axis label of plots, for example: ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point() + ggtitle(&quot;scatter plot&quot;) + theme(axis.text.x = element_text(angle=90)) As a last examples, let’s see how we can control the plot’s legend: Colored background: ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2, color=DE)) + geom_point() + theme(legend.background = element_rect(fill=&quot;yellow&quot;)) Decrease or increase the space between the legend box and the plot: ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2, color=DE)) + geom_point() + theme(legend.box.spacing = unit(3, &quot;cm&quot;)) # default is 0.4cm Remove the key background: ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2, color=DE)) + geom_point() + theme(legend.key = element_blank()) Graphical summary of the different theme elements: source To learn more, check: complete guide on how to modify the ggplot2 theme. ggplot2 theme elements demonstration (source of above image) "],["colors.html", "8.11 Colors", " 8.11 Colors Colors can be set a different way in ggplot2, and in R in general. 8.11.1 All R colors The easiest way is to fetch colors by their names. There are 657 color names available for you to pick! You can check them by querying the following in the console: colors() ggplot2 provides a color scale by default. Many different palettes are available to change the default scale. 8.11.2 Base R palettes Base R provides built-in palettes, that can be leveraged in ggplot. For example: rainbow() heat.colors() terrain.colors() topo.colors() cm.colors() All of the above are functions that take one parameter n i.e. the number of colors needed. The output is a vector of hex color codes, for example: rainbow(5) ## [1] &quot;#FF0000&quot; &quot;#CCFF00&quot; &quot;#00FF66&quot; &quot;#0066FF&quot; &quot;#CC00FF&quot; rainbow(10) ## [1] &quot;#FF0000&quot; &quot;#FF9900&quot; &quot;#CCFF00&quot; &quot;#33FF00&quot; &quot;#00FF66&quot; &quot;#00FFFF&quot; &quot;#0066FF&quot; &quot;#3300FF&quot; &quot;#CC00FF&quot; ## [10] &quot;#FF0099&quot; We can set them as values parameter in the scale_fill_manual() or scale_color_manual() layers: ggplot(data=gtf, mapping=aes(x=chr, fill=gene_type)) + geom_bar(position=&quot;dodge&quot;) + scale_fill_manual(values=rainbow(5)) ggplot(data=gtf, mapping=aes(x=chr, fill=gene_type)) + geom_bar(position=&quot;dodge&quot;) + scale_fill_manual(values=terrain.colors(5)) 8.11.3 RColorBrewer You can easily pick palettes from the RColorBrewer package, that is included in ggplot2. Available palettes are shown below: You can check which palettes are colorblind-friendly the following way: library(RColorBrewer) display.brewer.all(colorblindFriendly = TRUE) We can easily take advantage of the RColorBrewer’s palettes in ggplot2 with : scale_color_brewer() layer (if you mapped variables with color in aes()) scale_fill_brewer() layer (if you mapped variables with fill in aes()) ggplot(data=gtf, mapping=aes(x=chr, fill=gene_type)) + geom_bar(position=&quot;dodge&quot;) + scale_fill_brewer() By default, the palette used is “Blues”. How does that look using “Dark2” palette? ggplot(data=gtf, mapping=aes(x=chr, fill=gene_type)) + geom_bar(position=&quot;dodge&quot;) + scale_fill_brewer(palette=&quot;Dark2&quot;) 8.11.4 ggsci Package {ggsci} contains a collection of pre-made color palettes inspired by colors used in scientific journals (and also by Science Fiction movies and series!). Example of palettes from {ggsci}: scale_color_npg() and scale_fill_npg() (Nature Publishing Group) scale_color_aaas() and scale_fill_aaas(): (American Association for the Advancement of Science) scale_color_lancet() and scale_fill_lancet() (Lancet) scale_color_igv() and scale_fill_igv() (Integrative Genome Viewer) scale_color_gsea() and scale_fill_gsea() (Gene Set Enrichment Analysis) scale_color_startrek() and scale_fill_startrek() scale_color_simpsons() and scale_fill_simpsons() Note that some palettes are for continuous variables (e.g. gsea), and some for discrete variables (e.g. npg). Example of scales for discrete data: library(ggsci) ggplot(data=gtf, mapping=aes(x=chr, fill=gene_type)) + geom_bar(position=&quot;dodge&quot;) + ggtitle(&quot;scale_fill_ngp&quot;, subtitle = &quot;Nature Publishing Group&quot;) + scale_fill_npg() ggplot(data=gtf, mapping=aes(x=chr, fill=gene_type)) + geom_bar(position=&quot;dodge&quot;) + ggtitle(&quot;scale_fill_aaas&quot;, subtitle = &quot;American Association for the Advancement of Science&quot;) + scale_fill_aaas() Example of a scale for continuous data: ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2, color=sample1)) + geom_point() + scale_color_gsea() "],["faceting.html", "8.12 Faceting", " 8.12 Faceting ggplot2 provides facet functions in R, that allow to easily split the plot, according to a given variable. For example, we can start again from the gtf object. You can run the following command if you do not have the data loaded in your environment: gtf &lt;- read_csv(&quot;DataViz_source_files-main/files/gencode.v44.annotation.csv&quot;) We produced a barplot out of this data. However, there is one variable that we did not consider: strand. Using the faceting function facet_wrap, one can easily split that barplot into 2 plots: one will represent the + strand, one will represent the - strand. ggplot(data=gtf, mapping=aes(x=chr, fill=gene_type)) + geom_bar(position=&quot;dodge&quot;) + facet_wrap(~strand) If you want to organize plots vertically, you can set dir=“v”: ggplot(data=gtf, mapping=aes(x=chr, fill=gene_type)) + geom_bar(position=&quot;dodge&quot;) + facet_wrap(~strand, dir=&quot;v&quot;) You can also split/facet the plots using a second variable, for example: ggplot(data=gtf, mapping=aes(x=chr, color=chr)) + geom_bar(position=&quot;dodge&quot;) + facet_wrap(gene_type~strand) By default, scales are common in all plots. You may want to change this to “free scales” for more readability: it will set the scales per sub-plot. ggplot(data=gtf, mapping=aes(x=chr, color=chr)) + geom_bar(position=&quot;dodge&quot;) + facet_wrap(gene_type~strand, scales = &quot;free&quot;) "],["exercise-3.html", "8.13 Exercise 3", " 8.13 Exercise 3 This exercise aims to give you the opportunity to practice some of the fine-tuning we have just learned. For this exercise, we will use the diamonds dataset that is automatically loaded with ggplot2. The dataset containing the prices and other attributes of almost 54,000 diamonds. You can readily use it in your current session: diamonds ## # A tibble: 53,940 × 10 ## carat cut color clarity depth table price x y z ## &lt;dbl&gt; &lt;ord&gt; &lt;ord&gt; &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0.23 Ideal E SI2 61.5 55 326 3.95 3.98 2.43 ## 2 0.21 Premium E SI1 59.8 61 326 3.89 3.84 2.31 ## 3 0.23 Good E VS1 56.9 65 327 4.05 4.07 2.31 ## 4 0.29 Premium I VS2 62.4 58 334 4.2 4.23 2.63 ## 5 0.31 Good J SI2 63.3 58 335 4.34 4.35 2.75 ## 6 0.24 Very Good J VVS2 62.8 57 336 3.94 3.96 2.48 ## 7 0.24 Very Good I VVS1 62.3 57 336 3.95 3.98 2.47 ## 8 0.26 Very Good H SI1 61.9 55 337 4.07 4.11 2.53 ## 9 0.22 Fair E VS2 65.1 61 337 3.87 3.78 2.49 ## 10 0.23 Very Good H VS1 59.4 61 338 4 4.05 2.39 ## # ℹ 53,930 more rows Make a scatter plot of carat (x-axis) vs price (y-axis), with colors mapped to the cut. correction ggplot(data=diamonds, mapping=aes(x=carat, y=price, color=cut)) + geom_point() Facet / split the plot per color (that is a column in diamonds). correction ggplot(data=diamonds, mapping=aes(x=carat, y=price, color=cut)) + geom_point() + facet_wrap(~color) Change the defaut theme (to theme_bw(), theme_minimal(), for example) and increase the base text size, and add a title to the overall plot. correction ggplot(data=diamonds, mapping=aes(x=carat, y=price, color=cut)) + geom_point() + facet_wrap(~color) + theme_minimal(base_size = 15) + ggtitle(&quot;Diamonds carat, price and cut&quot;) Change the color palette to the one of your choice. You can pick one from RColorBrewer, for example. correction ggplot(data=diamonds, mapping=aes(x=carat, y=price, color=cut)) + geom_point() + facet_wrap(~color) + theme_minimal(base_size = 15) + ggtitle(&quot;Diamonds carat, price and cut&quot;) + scale_color_brewer(palette=&quot;Dark2&quot;) Play with the theme() function. For example: Rotate the x-axis labels to 90 degrees. Make the individual titles larger bold (this is done with strip.text parameter). correction ggplot(data=diamonds, mapping=aes(x=carat, y=price, color=cut)) + geom_point() + facet_wrap(~color) + theme_minimal(base_size = 15, base_family = &quot;Padauk&quot;) + ggtitle(&quot;Diamonds carat, price and cut&quot;) + scale_color_brewer(palette=&quot;Dark2&quot;) + theme(axis.text.x = element_text(angle=90), strip.text = element_text(size = 16, face = &quot;bold&quot;)) "],["data-filtering-and-wrangling.html", "Part9 Data filtering and wrangling", " Part9 Data filtering and wrangling We will now see a few functions to filter, select and re-organize a data object. "],["filter.html", "9.1 filter()", " 9.1 filter() filter() will filter rows. If we take the geneexp objet as an example, we can filter only down-regulated genes using the filter() function of {dplyr}. In case you need to import the data again: geneexp &lt;- read_csv(&quot;DataViz_source_files-main/files/expression_20genes.csv&quot;) filter(geneexp, DE==&quot;Down&quot;) ## # A tibble: 5 × 4 ## Gene DE sample1 sample2 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AKT3 Down 15.1 1.57 ## 2 STAT3 Down 15.2 5.46 ## 3 HPK1 Down 14.1 7.34 ## 4 STAT5 Down 18.6 9.21 ## 5 ADAM17 Down 16.1 10.3 == is a logical operator that represents equality. It means that filter will return rows in geneexp that are exactly equal to “Down”. Logical operators: Operator Description &lt; less than &lt;= less than or equal to &gt; greater than &gt;= greater than or equal to == exactly equal to != not equal to !x not x x | y x OR y x &amp; y x AND y We can have several conditions. For example, we may want to extract only rows that have either Up OR Down in DE: filter(geneexp, DE==&quot;Down&quot; | DE==&quot;Up&quot;) ## # A tibble: 8 × 4 ## Gene DE sample1 sample2 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AKT3 Down 15.1 1.57 ## 2 STAT3 Down 15.2 5.46 ## 3 HPK1 Down 14.1 7.34 ## 4 TLR8 Up 2.69 16.3 ## 5 STAT5 Down 18.6 9.21 ## 6 ADAM17 Down 16.1 10.3 ## 7 PTEN Up 0.0210 11.2 ## 8 MAPK2 Up 0.998 9.56 Here, we introduce another operator, |, which mean OR, so rows will be kept if there is either Down OR Up in DE column. A good practice is to assign the filtered output to a new object, for example: geneexp_filt &lt;- filter(geneexp, DE==&quot;Down&quot; | DE==&quot;Up&quot;) "],["select.html", "9.2 select()", " 9.2 select() select() will select columns from a data frame. Select only columns Gene and DE from geneexp: select(geneexp, Gene, DE) ## # A tibble: 20 × 2 ## Gene DE ## &lt;chr&gt; &lt;chr&gt; ## 1 DKK1 No ## 2 TP53 No ## 3 BRCA1 No ## 4 AKT3 Down ## 5 CCND1 No ## 6 AXL No ## 7 STAT3 Down ## 8 CCL1 No ## 9 TRAF2 No ## 10 IL1R No ## 11 TAB2 No ## 12 HPK1 Down ## 13 TLR8 Up ## 14 TGFB No ## 15 STAT5 Down ## 16 ADAM17 Down ## 17 PTEN Up ## 18 SMRT No ## 19 DVL No ## 20 MAPK2 Up Again, a good practice is to save that subset into a new object: geneexp_selected &lt;- select(geneexp, Gene, DE) "],["rename.html", "9.3 rename()", " 9.3 rename() You can easily rename a column using the rename() function. For example, we can rename column Gene to Symbol, the following way: rename(geneexp, Symbol=Gene) ## # A tibble: 20 × 4 ## Symbol DE sample1 sample2 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 DKK1 No 9.06 5.27 ## 2 TP53 No 3.57 8.55 ## 3 BRCA1 No 7.39 8.24 ## 4 AKT3 Down 15.1 1.57 ## 5 CCND1 No 6.74 10.1 ## 6 AXL No 13.5 16.6 ## 7 STAT3 Down 15.2 5.46 ## 8 CCL1 No 5.28 7.09 ## 9 TRAF2 No 8.93 12.9 ## 10 IL1R No 8.46 15.3 ## 11 TAB2 No 9.76 14.6 ## 12 HPK1 Down 14.1 7.34 ## 13 TLR8 Up 2.69 16.3 ## 14 TGFB No 7.83 12.5 ## 15 STAT5 Down 18.6 9.21 ## 16 ADAM17 Down 16.1 10.3 ## 17 PTEN Up 0.0210 11.2 ## 18 SMRT No 11.7 16.9 ## 19 DVL No 4.33 6.84 ## 20 MAPK2 Up 0.998 9.56 The first argument is the data, then comes the column(s) to rename in the format: new_name=old_name. "],["exercise-4.html", "9.4 Exercise 4", " 9.4 Exercise 4 We will start from gtf object that we already used. Read it as follows, if it is no longer in your environment: gtf &lt;- read_csv(&quot;DataViz_source_files-main/files/gencode.v44.annotation.csv&quot;) Rename column chr to Chromosome. Assign to a new object. correction gtf2 &lt;- rename(gtf, chromosome=chr) 2. Keep/filter rows matching “+” as strand, and “chr4” as chromosome chr4. Assign this filtered data to a new object. correction gtf3 &lt;- filter(gtf2, strand==&quot;+&quot; &amp; chromosome==&quot;chr4&quot;) Select only columns gene_symbol and gene_type. correction gtf4 &lt;- select(gtf3, gene_symbol, gene_type) "],["more-ggplots.html", "Part10 More ggplots ", " Part10 More ggplots "],["histograms-and-density-plots.html", "10.1 Histograms and density plots", " 10.1 Histograms and density plots 10.1.1 Histogram We can use one of our previous objects to create a histogram. You can get it back with: rnaseq2 &lt;- read_csv(&quot;DataViz_source_files-main/files/GSE150029_rnaseq_log2_long.csv&quot;) ggplot(rnaseq2, aes(x=log2_counts)) + geom_histogram() We can split the histogram per sample: ggplot(rnaseq2, aes(x=log2_counts, color=sample)) + geom_histogram() Set position to “identity”, so histograms will not be on top of each other: ggplot(rnaseq2, aes(x=log2_counts, color=sample)) + geom_histogram(position=&quot;identity&quot;) Set alpha (transparency to 0.2): ggplot(rnaseq2, aes(x=log2_counts, color=sample)) + geom_histogram(position=&quot;identity&quot;, alpha=0.2) Express as density instead of counts: ggplot(rnaseq2, aes(x=log2_counts, color=sample)) + geom_histogram(aes(y=after_stat(density)), position=&quot;identity&quot;, alpha=0.2) + theme_classic() 10.1.2 Density plot The structure is pretty much the same: ggplot(rnaseq2, aes(x=log2_counts, color=sample)) + geom_density(alpha=0.2) + theme_classic() You can use fill instead: ggplot(rnaseq2, aes(x=log2_counts, fill=sample)) + geom_density(alpha=0.2) + theme_classic() 10.1.3 Histogram + density As we combined geom_boxplot and geom_violin in a previous exercise, we can also combine geom_histogram and geom_density: ggplot(rnaseq2, aes(x=log2_counts, color=sample)) + geom_histogram(aes(y=after_stat(density)), position=&quot;identity&quot;, alpha=0.2) + geom_density(alpha=0.2) + theme_classic() "],["pie-chart.html", "10.2 Pie chart", " 10.2 Pie chart We will plot a pie chart representing the number of genes from gtf found in each chromosome. Prepare data so as to obtain counts (that is more advanced dplyr manipulation - we will not go through details): gtf_count_chr &lt;- gtf %&gt;% group_by(chr) %&gt;% # group by allows to make the next calculations by the group specified summarise(counts=n()) The coord_polar() is needed here: pie plots are stacked barplots in polar coordinates. ggplot(data=gtf_count_chr, mapping=aes(x=&quot;&quot;, y=counts, fill=chr)) + geom_bar(stat=&quot;identity&quot;) + coord_polar(&quot;y&quot;, start=0) ggplot(data=gtf_count_chr, mapping=aes(x=&quot;&quot;, y=counts, fill=chr)) + geom_bar(stat=&quot;identity&quot;) + coord_polar(&quot;y&quot;, start=0) + theme_void() Change the color scale: ggplot(data=gtf_count_chr, mapping=aes(x=&quot;&quot;, y=counts, fill=chr)) + geom_bar(stat=&quot;identity&quot;) + coord_polar(&quot;y&quot;, start=0) + scale_fill_brewer(palette=&quot;Paired&quot;) + theme_void() Here is a nice page about more pie plot customization. "],["marginal-plots.html", "10.3 Marginal plots", " 10.3 Marginal plots Function ggMarginal from package {ggExtra} allows to easily add histograms, boxplots or density plots to the margins of a scatter plot. library(ggExtra) # Save the classic plot to an object. p &lt;- ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2)) + geom_point() # add marginal histogram ggMarginal(p, type=&quot;histogram&quot;) # add marginal density ggMarginal(p, type=&quot;density&quot;) # add marginal boxplot ggMarginal(p, type=&quot;boxplot&quot;) The mapping of variables (for example, using color or fill) can also be inherited by the marginal plots. # add mapping of points to &quot;DE&quot; column : p &lt;- ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2, color=DE)) + geom_point() # tell ggMarginal to color / split the boxplot according to variable mapped in color/colour ggMarginal(p, type=&quot;boxplot&quot;, groupColour = TRUE) Let’s add more features that we have learned in this workshop: # add mapping of points to &quot;DE&quot; column : p &lt;- ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2, color=DE)) + geom_point() + theme_minimal(base_size = 16) + geom_rug(alpha=0.4, sides = &quot;tr&quot;) + geom_density_2d(alpha=0.2, colour = &quot;pink&quot;) + ggtitle(&quot;Example of ggMarginal&quot;) + theme(legend.position=&quot;bottom&quot;, plot.title = element_text(hjust = 0.5)) # tell ggMarginal to color / split the boxplot according to variable mapped in color/colour ggMarginal(p, type=&quot;boxplot&quot;, groupColour = TRUE) "],["exercises-to-do-at-home.html", "Part11 Exercises to do at home", " Part11 Exercises to do at home The following sets of exercises aim to help you practice what was learned so far during the workshop. You can practice at home. Exercise 5: barplot Exercise 6: scatter plot Exercise 7: boxplot "],["exercise-5-barplot.html", "11.1 Exercise 5: barplot", " 11.1 Exercise 5: barplot Import DataViz_source_files-main/files/population_age_group_per_sex_long_format.csv into an object called pop_age. correction pop_age &lt;- read_csv(&quot;DataViz_source_files-main/files/population_age_group_per_sex_long_format.csv&quot;) Create a barplot that shows the number of people per Year: correction ggplot(data=pop_age, mapping=aes(x=Year, y=Population)) + geom_bar(stat=&quot;identity&quot;) Split by Sex (in the same plot: do not split into different plots): correction ggplot(data=pop_age, mapping=aes(x=Year, y=Population, fill=Sex)) + geom_bar(stat=&quot;identity&quot;) Filter the data to keep only “Spain” in “Country”: correction pop_age_spain &lt;- filter(pop_age, Country==&quot;Spain&quot;) ggplot(data=pop_age_spain, mapping=aes(x=Year, y=Population, fill=Sex)) + geom_bar(stat=&quot;identity&quot;) Show the bars next to each other. correction ggplot(data=pop_age_spain, mapping=aes(x=Year, y=Population, fill=Sex)) + geom_bar(stat=&quot;identity&quot;, position=&quot;dodge&quot;) Change default colors using scale_fill_manual() layer. The structure is not easy to remember: take a peek at the answer! correction ggplot(data=pop_age_spain, mapping=aes(x=Year, y=Population, fill=Sex)) + geom_bar(stat=&quot;identity&quot;, position=&quot;dodge&quot;) + scale_fill_manual(values=c(Female=&quot;darkgreen&quot;, Male=&quot;red&quot;)) Add a title, change the theme / background: correction ggplot(data=pop_age_spain, mapping=aes(x=Year, y=Population, fill=Sex)) + geom_bar(stat=&quot;identity&quot;, position=&quot;dodge&quot;) + scale_fill_manual(values=c(&quot;darkgreen&quot;, &quot;red&quot;)) + ggtitle(&quot;Spanish population from 1950 to 2021 per sex&quot;) + theme_minimal() 8. Now split the plot by Age group using facet_wrap() correction ggplot(data=pop_age_spain, mapping=aes(x=Year, y=Population, fill=Sex)) + geom_bar(stat=&quot;identity&quot;, position=&quot;dodge&quot;) + scale_fill_manual(values=c(&quot;darkgreen&quot;, &quot;red&quot;)) + ggtitle(&quot;Spanish population from 1950 to 2021 per sex&quot;) + theme_minimal() + facet_wrap(~Age_group) Save to a PDF file: Export -&gt; Save as PDF. Note: when saving to PDF format, you cannot manualy drag the plot to get the size and proportion you want, but you can Preview before saving it. If you prefer, you can save the file using ggsave() (or you can do both!). correction # first, save to an object plot_age &lt;- ggplot(data=pop_age_spain, mapping=aes(x=Year, y=Population, fill=Sex)) + geom_bar(stat=&quot;identity&quot;, position=&quot;dodge&quot;) + scale_fill_manual(values=c(&quot;darkgreen&quot;, &quot;red&quot;)) + ggtitle(&quot;Spanish population from 1950 to 2021 per sex&quot;) + theme_minimal() + facet_wrap(~Age_group) # save file ggsave(filename=&quot;population_age_sex_Spain.pdf&quot;, plot=plot_age, device = &quot;pdf&quot;, units = &quot;in&quot;, width = 10, height = 8) Save your filtered data as a .csv file: have a look at the write_csv() function from {readr}: correction write_csv(pop_age_spain, &quot;subset_spain.csv&quot;) "],["exercise-6-scatter-plot.html", "11.2 Exercise 6: scatter plot", " 11.2 Exercise 6: scatter plot Import DataViz_source_files-main/files/GSE150029_rnaseq_log2.csv into an object called rnaseq. correction rnaseq &lt;- read_csv(&quot;DataViz_source_files-main/files/GSE150029_rnaseq_log2.csv&quot;) Create a scatter plot that represents sample CTRL on the x axis and sample EZH on the y axis. correction ggplot(data=rnaseq, mapping=aes(x=CTRL, y=EZH)) + geom_point() 3. Color the points according to the gene_biotype correction ggplot(data=rnaseq, mapping=aes(x=CTRL, y=EZH, color=gene_biotype)) + geom_point() 3. Not very readable! Filter and plot only data corresponding to either lincRNA OR miRNA. correction rnaseq_linc_mirna_filter1 &lt;- filter(rnaseq, (gene_biotype==&quot;lincRNA&quot; | gene_biotype==&quot;miRNA&quot;)) ggplot(data=rnaseq_linc_mirna_filter1, mapping=aes(x=CTRL, y=EZH, color=gene_biotype)) + geom_point() 4. Now keep only those lincRNAs and miRNAs that are expressed in CTRL at least 1.5 times more than in EZH. correction rnaseq_linc_mirna_filter2 &lt;- filter(rnaseq, (gene_biotype==&quot;lincRNA&quot; | gene_biotype==&quot;miRNA&quot;) &amp; CTRL &gt; 1.5*EZH) ggplot(data=rnaseq_linc_mirna_filter2, mapping=aes(x=CTRL, y=EZH, color=gene_biotype)) + geom_point() Add a title to the plot, and make it bold (see theme() section of the course) correction ggplot(data=rnaseq_linc_mirna_filter2, mapping=aes(x=CTRL, y=EZH, color=gene_biotype)) + geom_point() + ggtitle(&quot;lincRNA and miRNA&quot;) + theme(plot.title = element_text(face = &quot;bold&quot;)) NOTE: If you want to label only one (or few) point(s), click here. First, filter the data frame: SNHG8 &lt;- filter(rnaseq, gene_name==&quot;SNHG8&quot;) Then, add it to geom_text: ggplot(data=rnaseq_linc_mirna_filter2, mapping=aes(x=CTRL, y=EZH, color=gene_biotype)) + geom_point() + ggtitle(&quot;lincRNA and miRNA&quot;) + theme(plot.title = element_text(face = &quot;bold&quot;)) + geom_text(data=SNHG8, label=&quot;SNHG8&quot;, show.legend = FALSE) "],["exercise-7-boxplot.html", "11.3 Exercise 7: boxplot", " 11.3 Exercise 7: boxplot Read in DataViz_source_files-main/files/GSE150029_rnaseq_log2_long.csv into a new object called rnaseq2. correction rnaseq2 &lt;- read_csv(&quot;DataViz_source_files-main/files/GSE150029_rnaseq_log2_long.csv&quot;) Create a boxplot that will represent the samples on the x axis, and their expression on the y axis. correction ggplot(data=rnaseq2, mapping=aes(x=sample, y=log2_counts)) + geom_boxplot() Split the boxes per gene_biotype. correction ggplot(data=rnaseq2, mapping=aes(x=sample, y=log2_counts, fill=gene_biotype)) + geom_boxplot() Keep only protein_coding and lincRNA biotypes (you can save the filtered data into a new object) and re-do the same plot as in 3. correction rnaseq2_filtered &lt;- filter(rnaseq2, gene_biotype==&quot;protein_coding&quot; | gene_biotype==&quot;lincRNA&quot;) ggplot(data=rnaseq2_filtered, mapping=aes(x=sample, y=log2_counts, fill=gene_biotype)) + geom_boxplot() Add a geom_violin() layer. Set alpha=0.3 in geom_violin. What is the alpha parameter? correction ggplot(data=rnaseq2_filtered, mapping=aes(x=sample, y=log2_counts, fill=gene_biotype)) + geom_boxplot() + geom_violin(alpha=0.3) # if boxplot and violin plots are misaligned, you can play with the position parameter in geom_violin, such as: # geom_violin(position=position_dodge(0.7)) Look at the help page of geom_boxplot() and change the following parameters: Set outlier color to red Set outlier shape as triangles correction ggplot(data=rnaseq2_filtered, mapping=aes(x=sample, y=log2_counts, fill=gene_biotype)) + geom_boxplot(outlier.colour = &quot;red&quot;, outlier.shape = &quot;triangle&quot;) "],["interactive-plots-with-plotly.html", "Part12 Interactive plots with {plotly}", " Part12 Interactive plots with {plotly} {plotly} is a package that makes interactive graphs. There are many applications to plotly, but a simple one is to convert a plot created by ggplot into an interactive version. First we can install plotly (bottom-right panel -&gt; Packages -&gt; Install). And then we load the package: tick the package in the list. Let’s read again one of our first data file: geneexp &lt;- read_csv(&quot;DataViz_source_files-main/files/expression_20genes.csv&quot;) We can first save the “ggplot” as an object myplot: myplot &lt;- ggplot(data=geneexp, mapping=aes(x=sample1, y=sample2, label=Gene, color=DE)) + geom_point() And then input that object into the ggplotly() function. ggplotly(p=myplot) The interactive plot should appear in the Viewer tab (bottom-right panel). Not that you can zoom into the plot! Customize what appears in the tooltip box. For example, here, we only show the gene label information: ggplotly(p=myplot, tooltip=&quot;label&quot;) It also works for different types of plots: for example, barplots. mybarplot &lt;- ggplot(data=geneexp, mapping=aes(x=DE)) + geom_bar() ggplotly(p=mybarplot) You can add ggplot2 layers / components: mybarplot &lt;- ggplot(data=geneexp, mapping=aes(x=DE)) + geom_bar() + ggtitle(label=&quot;barplot in ggplotly&quot;) + theme_bw() ggplotly(p=mybarplot) "],["more-advanced-data-manipulation.html", "Part13 More advanced data manipulation ", " Part13 More advanced data manipulation "],["the-pipe-operator.html", "13.1 The pipe operator", " 13.1 The pipe operator The tidyverse provides a function %&gt;% which pipes the output of one function as the input of the next function. This way, different functions from the tidyverse can be linked together into a clean piece of code. If we want to produce a one-liner out of the 3 lines of code of the previous exercise, we can do it the following way: gtf_final &lt;- rename(gtf, chromosome=chr) %&gt;% filter(strand==&quot;+&quot; &amp; chromosome==&quot;chr4&quot;) %&gt;% select(gene_symbol, gene_type) Note that, in filter and select, you do not need to specify the first parameter (the data), as it is automatically looking for the output of the previous one! If you want to learn more about the pipe, you can for example refer to that page. Note that we can also link the data manipulation output to ggplot: the output of the last command will then be used as an input to ggplot: rename(gtf, chromosome=chr) %&gt;% filter(strand==&quot;+&quot; &amp; chromosome==&quot;chr4&quot;) %&gt;% select(gene_symbol, gene_type) %&gt;% ggplot(aes(x=gene_type)) + geom_bar() "],["from-wide-to-long-format.html", "13.2 From wide to long format", " 13.2 From wide to long format The wide format is what you would typically have in a table with measurements, such as genes in rows and samples in columns. However, we have seen that ggplot2 sometimes requires data to be converted to a long format. In a long format, one row corresponds to one observation/measurement, with all information associated to it. {tidyr} provides pivot_longer() to convert wide to long format, and pivot_wider() to convert a long to a wide format. Our object geneexp is in a wide format. Two columns contain values of expression: ## # A tibble: 5 × 4 ## Gene DE sample1 sample2 ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 DKK1 No 9.06 5.27 ## 2 TP53 No 3.57 8.55 ## 3 BRCA1 No 7.39 8.24 ## 4 AKT3 Down 15.1 1.57 ## 5 CCND1 No 6.74 10.1 In order to convert to a long format we will create: One column that contains the sample names One column that contains the expression values pivot_longer(geneexp, cols=c(&quot;sample1&quot;, &quot;sample2&quot;)) ## # A tibble: 40 × 4 ## Gene DE name value ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 DKK1 No sample1 9.06 ## 2 DKK1 No sample2 5.27 ## 3 TP53 No sample1 3.57 ## 4 TP53 No sample2 8.55 ## 5 BRCA1 No sample1 7.39 ## 6 BRCA1 No sample2 8.24 ## 7 AKT3 Down sample1 15.1 ## 8 AKT3 Down sample2 1.57 ## 9 CCND1 No sample1 6.74 ## 10 CCND1 No sample2 10.1 ## # ℹ 30 more rows We can specify the names of the new columns as we create them: pivot_longer(geneexp, cols=c(&quot;sample1&quot;, &quot;sample2&quot;), names_to = &quot;samples&quot;, values_to = &quot;expression&quot;) ## # A tibble: 40 × 4 ## Gene DE samples expression ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 DKK1 No sample1 9.06 ## 2 DKK1 No sample2 5.27 ## 3 TP53 No sample1 3.57 ## 4 TP53 No sample2 8.55 ## 5 BRCA1 No sample1 7.39 ## 6 BRCA1 No sample2 8.24 ## 7 AKT3 Down sample1 15.1 ## 8 AKT3 Down sample2 1.57 ## 9 CCND1 No sample1 6.74 ## 10 CCND1 No sample2 10.1 ## # ℹ 30 more rows "],["exercise-8.html", "13.3 Exercise 8", " 13.3 Exercise 8 Let’s do a small exercise to practice this conversion. Read in file DataViz_source_files-main/files/stats_countries_barcelona_2013-2023.csv correction stats_countries &lt;- read_csv(&quot;DataViz_source_files-main/files/stats_countries_barcelona_2013-2023.csv&quot;) 2. Columns 2013 to 2022 contain observations. Convert this wide format into a long format. Save into a new object. correction # Option 1: list all columns stats_countries_long &lt;- pivot_longer(stats_countries, cols=c(&quot;2013&quot;, &quot;2014&quot;, &quot;2015&quot;, &quot;2016&quot;, &quot;2017&quot;, &quot;2018&quot;, &quot;2019&quot;, &quot;2020&quot;, &quot;2021&quot;, &quot;2022&quot;, &quot;2023&quot;), values_to = &quot;Population&quot;, names_to = &quot;Years&quot;) # Option 2: select columns that start with &quot;20&quot; stats_countries_long &lt;- pivot_longer(stats_countries, cols=starts_with(&quot;20&quot;), values_to = &quot;Population&quot;, names_to = &quot;Years&quot;) # Option 3: select all numeric columns stats_countries_long &lt;- pivot_longer(stats_countries, cols=where(is.numeric), values_to = &quot;Population&quot;, names_to = &quot;Years&quot;) 3. Do the 3 following tasks linked by a %&gt;% (pipe): Keep only rows that match “America” in column “Continent” have a population &gt;= 50 (column “Population”) Remove column Continent. Produce a barplot with “Years” in the x-axis, Population in the y-axis, and split by Country. correction stats_countries_long_filtered &lt;- filter(stats_countries_long, Continent==&quot;America&quot; &amp; Population &gt;= 50) %&gt;% select(-Continent) ggplot(data=stats_countries_long_filtered, mapping=aes(x=Years, y=Population, fill=Country)) + geom_bar(stat = &quot;identity&quot;, position = &quot;dodge&quot;) Customize your plot! Remember what we have done so far… You can, for example: Add a title (ggtitle()) Change the overall theme (e.g. theme_bw(), theme_minimal()) and / or play with graphical parameters (see section on theme() function) Facet the graph (facet_wrap()) … what else?… One way out of hundreds of ways to show your data! ggplot(data=stats_countries_long_filtered, mapping=aes(x=Years, y=Population, fill=Country)) + geom_bar(stat = &quot;identity&quot;, position = &quot;dodge&quot;) + theme_minimal(base_size = 14) + ggtitle(&quot;American population in Barcelona from 2013 to 2023&quot;) + theme(axis.text.x = element_text(angle=90), plot.title = element_text(size = 16, hjust = 0.5, face = &quot;bold&quot;)) + facet_wrap(~Country) If you have tried to change the color scale, you may have noticed that none are large enough for this data (we need 22 colors). One way to tackle this problem is to combine color palettes (e.g. from RColorBrewer) prior to plotting. # create a vector of 22 colors from RColorBrewer my22colors &lt;- c(brewer.pal(n=11, name=&quot;Paired&quot;), brewer.pal(n=11, name=&quot;Set3&quot;)) # feed the colors to &quot;scale_fill_manual&quot; ggplot(data=stats_countries_long_filtered, mapping=aes(x=Years, y=Population, fill=Country)) + geom_bar(stat = &quot;identity&quot;, position = &quot;dodge&quot;) + theme_minimal(base_size = 14) + scale_fill_manual(values=my22colors) + ggtitle(&quot;American population in Barcelona from 2013 to 2023&quot;) + theme(axis.text.x = element_text(angle=90), plot.title = element_text(size = 16, hjust = 0.5, face = &quot;bold&quot;)) + facet_wrap(~Country) "],["heatmaps-with-pheatmap.html", "Part14 Heatmaps with {pheatmap}", " Part14 Heatmaps with {pheatmap} We will introduce package {pheatmap} to produce heatmaps. First we can install pheatmap (bottom-right panel -&gt; Packages -&gt; Install). And then we load the package: tick the package in the list, or load it from the console: library(pheatmap) pheatmap is not from the tidyverse package, and does not follow the same structure. It does not work with layers, but with multiple parameters inside a same function. Let’s read the following data file, and convert it to matrix (that is the input format for pheatmap): expr_heatmap &lt;- read_csv(&quot;DataViz_source_files-main/files/GSE150029_rnaseq_for_heatmap.csv&quot;) %&gt;% column_to_rownames(var = &quot;gene_name&quot;) %&gt;% as.matrix() You can then simply plot the heatmap, giving the matrix as an input: pheatmap(expr_heatmap) Control what is clusters: rows, columns, both, or none: pheatmap(expr_heatmap, cluster_cols=FALSE, cluster_rows=TRUE) Show or hide row names: pheatmap(expr_heatmap, show_rownames = F) Change the color scale (rainbow() and heat.colors() are available from the base packages): pheatmap(expr_heatmap, color = rainbow(10), main = &quot;Rainbow colors&quot;) pheatmap(expr_heatmap, color = heat.colors(10), main=&quot;Heat colors&quot;) "],["demo-volcano-plot.html", "Part15 Demo volcano plot", " Part15 Demo volcano plot A volcano plot is a type of scatter plot represents differential expression of features (genes for example): on the x-axis we typically find the fold change and on the y-axis the p-value. Here is a demo of how to create a volcano plot from a file containing : Gene symbol log2 fold change p-value Read in the file: de &lt;- read_csv(&quot;DataViz_source_files-main/files/demo_volcano.csv&quot;) # The basic scatter plot: x is &quot;log2FoldChange&quot;, y is &quot;pvalue&quot; ggplot(data=de, aes(x=log2FoldChange, y=pvalue)) + geom_point() Doesn’t look quite like a Volcano plot… In volcano plots, the p-value is converted into a -log10(p-value): # Convert directly in the aes() ggplot(data=de, aes(x=log2FoldChange, y=-log10(pvalue))) + geom_point() That’s better! Choose a nicer theme: p &lt;- ggplot(data=de, aes(x=log2FoldChange, y=-log10(pvalue))) + geom_point() + theme_minimal() Add vertical lines for log2FoldChange thresholds, and one horizontal line for the p-value threshold: p2 &lt;- p + geom_vline(xintercept=c(-0.6, 0.6), col=&quot;red&quot;) + geom_hline(yintercept=-log10(0.05), col=&quot;red&quot;) The significantly differentially expressed genes are the ones found in the upper-left and upper-right corners. We can add a column to the data frame to specify if they are UP- or DOWN- regulated (log2FoldChange respectively positive or negative). Let’s create a new object with these new calculations. Note that we can use function mutate() from {dplyr} to create or modify columns de_fc &lt;- de %&gt;% mutate(log10pvalue=-log10(pvalue), diffexpressed=ifelse(log2FoldChange &gt; 0.6 &amp; pvalue &lt; 0.05, &quot;UP&quot;, ifelse(log2FoldChange &lt; -0.6 &amp; pvalue &lt; 0.05, &quot;DOWN&quot;, &quot;NO&quot;))) head(de_fc) ## # A tibble: 6 × 5 ## gene_symbol log2FoldChange pvalue log10pvalue diffexpressed ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 Ndufa9 -0.876 3.39e-34 33.5 DOWN ## 2 Rpp21 -0.976 1.56e-26 25.8 DOWN ## 3 Amotl1 -0.758 2.16e-24 23.7 DOWN ## 4 Gm44064 -0.849 5.13e-20 19.3 DOWN ## 5 Hcfc1r1 -0.602 3.80e-17 16.4 DOWN ## 6 Rgs18 -0.817 1.06e-16 16.0 DOWN Re-plot but, this time, conditionally color the points using diffexpressed column: p &lt;- ggplot(data=de_fc, aes(x=log2FoldChange, y=log10pvalue, col=diffexpressed)) + geom_point() + theme_minimal() Add vertical and horizontal lines, as we did before. p2 &lt;- p + geom_vline(xintercept=c(-0.6, 0.6), col=&quot;red&quot;) + geom_hline(yintercept=-log10(0.05), col=&quot;red&quot;) Change point colors: p3 &lt;- p2 + scale_color_manual(values=c(DOWN=&quot;blue&quot;, NO=&quot;grey50&quot;, UP=&quot;red&quot;)) p3 Now we will write down the name of genes beside the points… but only selected genes. Add to de_fc the new column “delabel”, that will contain the name of genes differentially expressed (NA will be set, in case they are NO). de_fc &lt;- mutate(de_fc, delabel=ifelse(diffexpressed==&quot;NO&quot;, NA, gene_symbol)) ggplot(data=de_fc, aes(x=log2FoldChange, y=log10pvalue, col=diffexpressed, label=delabel)) + geom_point() + theme_minimal() + geom_text() Finally, we can organize the labels nicely using the “ggrepel” package and the geom_text_repel() function: # load library: either &quot;tick it&quot; in the Packages tab, or use the following: library(ggrepel) # plot adding up all layers we have seen so far ggplot(data=de_fc, aes(x=log2FoldChange, y=log10pvalue, col=diffexpressed, label=delabel)) + geom_point() + theme_minimal(base_size = 16) + geom_text_repel(show.legend = FALSE) + scale_color_manual(values=c(DOWN=&quot;blue&quot;, NO=&quot;grey50&quot;, UP=&quot;red&quot;)) + geom_vline(xintercept=c(-0.6, 0.6), col=&quot;red&quot;) + geom_hline(yintercept=-log10(0.05), col=&quot;red&quot;) + ggtitle(label=&quot;Volcano plot&quot;) + theme(plot.title = element_text(hjust = 0.5, face = &quot;bold&quot;)) "],["resources.html", "Part16 Resources", " Part16 Resources RStudio/Tidyverse cheatsheets: RStudio ggplot2 dplyr tidyr readr ggplot elegant graphics for data analysis R graph gallery R graphics cookbook ggplot2 extensions Curated list of awesome ggplot2 packages, tutorials, etc. R programming Coursera course(Johns Hopkins University) Official up-to-date introduction to R (from the R Core Team) CRG Biocore intro course to the Tidyverse "]]
